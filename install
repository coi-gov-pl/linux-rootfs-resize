#!/usr/bin/env bash
#
# by Robert Plestenjak, robert.plestenjak@xlab.si
# by Stanislav Petr, glux@glux.org
# by Krzysztof Suszynski, krzysztof.suszynski@coi.gov.pl
#
# depends on: cloud-utils

set -eo pipefail

repodir="$( dirname "${BASH_SOURCE[0]}" )"
source "${repodir}/source/loader.bash"

loader_flag "${BASH_SOURCE[0]}"
loader_addpath "${repodir}/source"

include view.bash
include install-prerequisites.bash
include modify-initrd.bash
include modify-grub.bash

function deps() {
  for file in ${@}; do
    # check if is a valid file
    [ -f ${file} ] &&
      # is this file new?
      if [ ! -f /tmp/initrd${file} ]; then
        mkdir -p /tmp/initrd$(dirname ${file})
        cp -v ${file} /tmp/initrd${file}
        if [ $? != 0 ]; then
          # error, bug out
          echo "Can't copy \"${file}\""
          exit 1
        fi
      fi
  done
}

function copy-tools() {
  # install files listed in deps.lst
  while read tool; do
    IN=0
    for bin_path in "${initrd_path}"; do
      [[ -f ${bin_path}/${tool} ]] && IN=1
    done
    if [ ${IN} -eq 0 ]; then
      # get tools path
      toolpath=$(command -v ${tool})
      if [ $? != 0 ]; then
        # tool not installed, bug out
        echo "\"${tool}\" not found! Please install"
        exit 1
      fi
      # copy tool into initrd
      cp -v ${toolpath} bin/${tool}
      # install needed libraries
      deps "($(ldd ${toolpath}))"
    else
      echo "${tool} present"
    fi
  done <${inst_dir}/distro/${distro}/deps
}

function unpack-initrd() {
  # check format of current initrd and extract it
  if gziped-initrd; then
  	execute=$(gunzip -c ${initrd} | cpio -i --make-directories)
  else
  	execute=$(/usr/lib/dracut/skipcpio ${initrd} | gunzip -c | cpio -i)
  fi
}

function repack-initrd() {
  find ./ | cpio -H newc -o > /tmp/initrd.cpio
  if gziped-initrd; then
    gzip -c /tmp/initrd.cpio > ${initrd%-*}mod-${initrd##*-}
  else
    cp /tmp/initrd.cpio ${initrd%-*}mod-${initrd##*-}
  fi
}

function is-initrd-systemd() {
  [ -x "${init_script}" ] && file "${init_script}" | grep -q "GNU/Linux"
  return $?
}

function modify-initrd-systemv() {
  touch etc/mtab
  [ "${mod_type}" == "mod_lvm" ] && \
    sed -i "s/locking_type = 4/locking_type = 1/" etc/lvm/lvm.conf
  mod_file=${inst_dir}/distro/${distro}/${mod_type}
  sed -i -e "/${proc_insert_point}/r ${mod_file}" -e "//N" ${init_script}
  sed -i "/${call_insert_point}/i ${proc_name}" ${init_script}
}

function modify-initrd-systemd() {
  local mod_file=${inst_dir}/distro/${distro}/${mod_type}
  cp ${inst_dir}/systemd-growroot.service usr/lib/systemd/system/systemd-growroot.service
  ln -s usr/lib/systemd/system/systemd-growroot.service usr/lib/systemd/system/sysinit.target.wants/systemd-growroot.service
  cat $mod_file > bin/auto-growroot
  echo growroot >> bin/auto-growroot
  chmod +x bin/auto-growroot
}

function initrd() {
  # clean up
  [ -d /tmp/initrd ] && rm -rf /tmp/initrd
  # create temp directory and move there
  mkdir /tmp/initrd && cd /tmp/initrd
  # extract current initrd
  unpack-initrd
  # modify
  copy-tools
  if is-initrd-systemd; then
    modify-initrd-systemd
  else
    modify-initrd-systemv
  fi
  # create new
  repack-initrd
  # clean up
  cd ${inst_dir}
  # rm -rf /tmp/initrd.cpio /tmp/initrd
}

function grub-mod() {
  kernelmod=${kernel%-*}mod-${kernel##*-}
  case ${1} in
    "grub1")
      # clean existing mod
      grubby -o ${grub_config} --grub --remove-kernel=${kernelmod}
      # create new mod
      # copy kernel
      [ ! -f ${kernelmod} ] && cp ${kernel} ${kernelmod}
      # grub title
      grub_title="$(cat /etc/redhat-release) $(uname -r)mod"
      # grub kernel (softlink)
      grub_kernel=${kernelmod}
      # modified initrd
      grub_initrd=${initrd%-*}mod-${initrd##*-}
      # modify grub config
      grubby -o ${grub_config} --grub --copy-default --add-kernel="${grub_kernel}" \
        --title="${grub_title}" --initrd="${grub_initrd}" --make-default
    ;;
    "grub2")
      # copy kernel
      [ ! -f ${kernelmod} ] && cp ${kernel} ${kernelmod}
      # generate new grub2 config
      if [ -f /usr/sbin/grub2-mkconfig ]; then
        grub2-mkconfig -o ${grub_config}
      elif [ -f /usr/sbin/grub-mkconfig ]; then
        grub-mkconfig -o ${grub_config}
      fi
      # set default
      grubby --set-default ${kernelmod}
    ;;
  esac
}

function main() {
  # store directory from where we run install
  inst_dir=$(pwd)

  # set common variables
  partition-type
  [ $? -eq 1 ] && mod_type="mod_lvm" || mod_type="mod"

  # check distro and set distro specific variables
  distro=$(get-distro)

  # RedHat derivate
  if [ ${distro} == "centos-7" ]; then
      initrd_path="bin sbin usr/bin usr/sbin"
      kernel_version=$(uname -r)
      initrd=$(ls -1 -t /boot/initramfs-* | grep -v -P "(mod|rescue|kdump)" | head -n 1)
      kernel=$(ls -1 -t /boot/vmlinuz-* | grep -v -P "(mod|rescue|kdump)" | head -n 1)
      init_script="init"
      proc_insert_point="^export PATH=.*"
      proc_name="growroot"
      call_insert_point="^source_all pre-mount"
      grub_config="/boot/grub2/grub.cfg"
      grub="grub2"
  elif [ ${distro} == "centos-6" ]; then
      initrd_path="bin sbin usr/bin usr/sbin"
      kernel_version=$(uname -r)
      initrd=$(ls -1 -t /boot/initramfs-* -1 | grep -v mod | head -n 1)
      kernel=$(ls -1 -t /boot/vmlinuz-* -1 | grep -v mod | head -n 1)
      init_script="init"
      proc_insert_point="^export PATH=.*"
      proc_name="growroot"
      call_insert_point="^source_all pre-mount"
      grub_config="/boot/grub/grub.conf"
      grub="grub1"
  elif [ ${distro} == "debian-8" ]; then
      initrd_path="bin sbin"
      initrd="/boot/initrd.img-$(uname -r)"
      kernel="/boot/vmlinuz-$(uname -r)"
      init_script="scripts/local"
      proc_insert_point="^mountroot()"
      proc_name="\        growroot"
      call_insert_point="^.*local_premount$"
      grub_config="/boot/grub/grub.cfg"
      grub="grub2"
  elif [ ${distro} == "debian-7" ]; then
      initrd_path="bin sbin"
      initrd="/boot/initrd.img-$(uname -r)"
      kernel="/boot/vmlinuz-$(uname -r)"
      init_script="scripts/local"
      proc_insert_point="^mountroot()"
      proc_name="\        growroot"
      call_insert_point="^.*pre_mountroot$"
      grub_config="/boot/grub/grub.cfg"
      grub="grub2"
  elif [ ${distro} == "debian-6" ]; then
      initrd_path="bin sbin"
      initrd="/boot/initrd.img-$(uname -r)"
      kernel="/boot/vmlinuz-$(uname -r)"
      init_script="scripts/local"
      proc_insert_point="^mountroot()"
      proc_name="\        growroot"
      call_insert_point="^.*pre_mountroot$"
      grub_config="/boot/grub/grub.cfg"
      grub="grub2"
  elif [ ${distro} == "oracle-6" ]; then
      initrd_path="bin sbin usr/bin usr/sbin"
      initrd="/boot/initramfs-$(uname -r).img"
      kernel="/boot/vmlinuz-$(uname -r)"
      init_script="init"
      proc_insert_point="^export PATH=.*"
      proc_name="growroot"
      call_insert_point="^source_all pre-mount"
      grub_config="/boot/grub/grub.conf"
      grub="grub1"
  elif [ ${distro} == "unknown" ]; then
      echo "Distribution NOT supported!"
  else
    	echo "Distribution NOT supported!"
  exit 1
  fi
}

loader_finish

view.welcome

install-prerequisites
modify-initrd
modify-grub

view.farewell

# main
# initrd
# grub-mod ${grub}

exit 0
